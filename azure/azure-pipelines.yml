trigger:
  - none

schedules:
  - cron: '20 21 * * *'
    displayName: Daily midnight build
    branches:
      include:
        - develop
    always: true

variables:
  - group: immerza-app
  - name: pnpm_config_cache
    value: $(Pipeline.Workspace)/.pnpm-store
  - name: pnpm_app_env
    value: development

stages:
  - stage: Build
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: build
        steps:
          - task: Cache@2
            inputs:
              key: 'pnpm | "$(Agent.OS)" | pnpm-lock.yaml'
              path: $(pnpm_config_cache)
            displayName: Cache pnpm packages
          - task: NodeTool@0
            inputs:
              versionSpec: '16.x.x'
            displayName: 'install node'
          - task: npmAuthenticate@0
            inputs:
              workingFile: '$(System.DefaultWorkingDirectory)/.npmrc'
            displayName: 'authenticate npm'
          - script: |
              corepack enable
              corepack prepare pnpm@latest-8 --activate
              pnpm config set store-dir $(pnpm_config_cache)
            displayName: "Setup pnpm"
          - script: |
              pnpm install
            displayName: "Install dependencies"
          - script: |
              echo "SECRET_KEY=$SECRET_KEY" > ".env.$APP_ENV"
              ls .env*
              pnpm prebuild
            displayName: 'pnpm pre-build'
            env:
              APP_ENV: $(pnpm_app_env)
              API_URL: $(api_url)
              SECRET_KEY: $(secret_key)
              EAS_PROJECT_ID: $(eas_project_id)
      - job: set_build_version
        variables:
          tmp: $[counter(variables['reset_version'], variables['start_version'])]
        steps:
          - checkout: none
          - bash: |
              echo "##vso[task.setvariable variable=buildVersion;isOutput=true]$(tmp)"
            name: set_version
            displayName: 'set version'

  - stage: Build_Android
    dependsOn: Build
    jobs:
      - job: build_android
        variables:
          build_version: $[stageDependencies.Build.set_build_version.outputs['set_version.buildVersion'] ]
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: Cache@2
            inputs:
              key: 'pnpm | "$(Agent.OS)" | pnpm-lock.yaml'
              path: $(pnpm_config_cache)
            displayName: Cache pnpm
          - task: NodeTool@0
            inputs:
              versionSpec: '16.x.x'
            displayName: 'install node'
          - task: JavaToolInstaller@0
            inputs:
              versionSpec: '11'
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'
            displayName: 'install jdk'
          - script: |
              corepack enable
              corepack prepare pnpm@latest-8 --activate
              pnpm config set store-dir $(pnpm_config_cache)
            displayName: "Setup pnpm"
          - script: |
              pnpm install
            displayName: 'install dependencies'
          - script: |
              echo "SECRET_KEY=$SECRET_KEY" > ".env.$APP_ENV"
              ls .env*
              pnpm prebuild
            displayName: 'pnpm pre-build'
            env:
              APP_ENV: $(pnpm_app_env)
              API_URL: $(api_url)
              SECRET_KEY: $(secret_key)
              EAS_PROJECT_ID: $(eas_project_id)
          - script: |
              fastlane android build_release_apk
            displayName: 'build android release APK'
            env:
              KEY_PASSWORD: $(key_password)
              STORE_PASSWORD: $(store_password)
              BUILD_NUMBER: $(build_version)
          - publish: $(System.DefaultWorkingDirectory)/android/app/build/outputs/apk/release/app-release.apk
            artifact: immerzaApk
          - script: |
              fastlane android build_release_aab
            displayName: 'build android release AAB'
            env:
              KEY_PASSWORD: $(key_password)
              STORE_PASSWORD: $(store_password)
              BUILD_NUMBER: $(build_version)
          - publish: $(System.DefaultWorkingDirectory)/android/app/build/outputs/bundle/release/app-release.aab
            artifact: immerzaAab

  - stage: Deploy_Android
    dependsOn:
      - Build
      - Build_Android
    variables:
      build_version: $[stageDependencies.Build.set_build_version.outputs['set_version.build_version']]
    jobs:
      - job: deploy_android
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
            persistCredentials: true
          - download: current
            artifact: immerzaAab
          - task: GooglePlayRelease@4
            inputs:
              serviceConnection: 'Actimi Google Play'
              applicationId: '$(bundle_identifier)'
              action: 'SingleBundle'
              bundleFile: '$(Pipeline.Workspace)/immerzaAab/app-release.aab'
              track: 'internal'
          - script: |
              git checkout $(Build.SourceBranchName)
              git config --global user.email "sem@actimi.com"
              git config --global user.name "Azure Builder"
            displayName: 'setup git'
          - script: |
              git tag android_$(build_version)
              git push --tags
            displayName: 'git push tag'

  - stage: Upload_Builds_GoogleDrive
    dependsOn:
      - Build
      - Build_Android
    jobs:
      - job: upload_apk
        variables:
          build_version: $[stageDependencies.Build.set_build_version.outputs['set_version.buildVersion'] ]
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: DownloadSecureFile@1
            name: 'gdriveServiceAccount'
            inputs:
              secureFile: 'sem-gdrive-sa.json'
          - checkout: self
            persistCredentials: true
          - download: current
            artifact: immerzaApk
          - bash: |
              buildDate=`date +%F`
              echo $buildDate
              echo "##vso[task.setvariable variable=dateBuildVer;isOutput=true]Build-$(Build.BuildNumber)_Version-$(build_version)"
            name: set_date_version
            displayName: 'set date version'
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                # Write your commands here
                echo $(set_date_version.dateBuildVer)
                mv $(Pipeline.Workspace)/immerzaApk/app-release.apk $(Pipeline.Workspace)/immerzaApk/$(set_date_version.dateBuildVer).apk
                curl https://rclone.org/install.sh | sudo bash
                rclone -vv copy $(Pipeline.Workspace)/immerzaApk/$(set_date_version.dateBuildVer).apk driveSem:Builds/Immerza --config="$(System.DefaultWorkingDirectory)/rclone.conf" --drive-impersonate sem@actimi.com
            env:
              RCLONE_DRIVE_SERVICE_ACCOUNT_FILE: $(gdriveServiceAccount.secureFilePath)
          - script: |
              git checkout $(Build.SourceBranchName)
              git config --global user.email "sem@actimi.com"
              git config --global user.name "Azure Builder"
            displayName: 'setup git'
          - script: |
              git tag android_$(build_version)
              git push --tags
            displayName: 'git push tag'

  - stage: Build_iOS
    dependsOn: Build
    jobs:
      - job: build_ios
        variables:
          build_version: $[stageDependencies.Build.set_build_version.outputs['set_version.buildVersion'] ]
        pool:
          vmImage: 'macOS-latest'
        steps:
          - task: Cache@2
            inputs:
              key: 'pnpm | "$(Agent.OS)" | pnpm-lock.yaml'
              path: $(pnpm_config_cache)
            displayName: Cache pnpm
          - task: NodeTool@0
            inputs:
              versionSpec: '16.x.x'
            displayName: 'install node'
          - script: |
              corepack enable
              corepack prepare pnpm@latest-8 --activate
              pnpm config set store-dir $(pnpm_config_cache)
            displayName: "Setup pnpm"
          - script: |
              pnpm install
            displayName: "Install dependencies"
          - script: |
              echo "SECRET_KEY=$SECRET_KEY" > ".env.$APP_ENV"
              ls .env*
              pnpm prebuild
            displayName: 'pnpm pre-build'
            env:
              APP_ENV: $(pnpm_app_env)
              API_URL: $(api_url)
              SECRET_KEY: $(secret_key)
              EAS_PROJECT_ID: $(eas_project_id)
          - script: |
              echo $(build_version)
            displayName: 'echo build version'
          - script: |
              fastlane ios build_release
            displayName: 'build ios release'
            env:
              WORKSPACE_AND_SCHEME_NAME: $(ios_scheme)
              CERTIFICATES_GIT_BRANCH: $(certificates_git_branch)
              BUNDLE_IDENTIFIER: $(bundle_identifier)
              MATCH_PASSWORD: $(match_password)
              BUILD_NUMBER: $(build_version)
              MATCH_GIT_BEARER_AUTHORIZATION: $(System.AccessToken)
          - publish: $(System.DefaultWorkingDirectory)/$(ios_scheme).ipa
            artifact: immerzaIos

  - stage: Deploy_Ios
    dependsOn:
      - Build
      - Build_Ios
    variables:
      build_version: $[stageDependencies.Build.set_build_version.outputs['set_version.build_version']]
    jobs:
      - job: deploy
        pool:
          vmImage: 'macOS-latest'
        steps:
          - checkout: self
            persistCredentials: true
          - download: current
            artifact: immerzaIos
          - task: AppStoreRelease@1
            inputs:
              serviceEndpoint: 'actimi-appstore'
              releaseTrack: 'TestFlight'
              appIdentifier: '$(bundle_identifier)'
              appType: 'iOS'
              ipaPath: '$(Pipeline.Workspace)/immerzaIos/*.ipa'
              shouldSkipWaitingForProcessing: true
              installFastlane: false
          - script: |
              git checkout $(Build.SourceBranchName)
              git config --global user.email "sem@actimi.com"
              git config --global user.name "Azure Builder"
            displayName: 'setup git'
          - script: |
              git tag ios_$(build_version)
              git push --tags
            displayName: 'git push tag'
